{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst sortedPostsBackward = arr => {\n  return arr.concat().sort((a, b) => {\n    return b.votes - a.votes;\n  });\n};\n\nconst sortedPostsForward = arr => {\n  return arr.concat().sort((a, b) => {\n    return a.votes - b.votes;\n  });\n};\n\nconst modifyVotes = (state, action) => {\n  return state.map(post => {\n    if (JSON.stringify(post) === JSON.stringify(action.post)) {\n      if (action.type === \"SUM_VOTE\") {\n        post['votes']++;\n        return post;\n      } else {\n        post['votes']--;\n        return post;\n      }\n    }\n\n    return post;\n  });\n};\n\nconst compareVotes = (arr, type, post) => {\n  if (type === \"SUM_VOTE\") {\n    arr.forEach(function (element, index) {\n      if (JSON.stringify(element) === JSON.stringify(post) && index > 0) {\n        console.log(index);\n\n        if (arr[index - 1]['votes'] < post['votes']) {\n          arr.splice(index, 1);\n          arr.splice(index - 1, 0, post);\n        }\n      }\n    });\n    return arr;\n  } else {\n    arr.forEach(function (element, index) {\n      if (JSON.stringify(element) === JSON.stringify(post) && index < arr.length - 1) {\n        if (arr[index + 1]['votes'] > post['votes']) {\n          arr.splice(index, 1);\n          arr.splice(index + 1, 0, post);\n        }\n      }\n    });\n    return arr;\n  }\n};\n\nconst posts = (state = [], action) => {\n  if (action.type === \"LOAD_POSTS\") {\n    return sortedPostsForward(action.posts);\n  } else if (action.type === \"ORDER_FORWARD\") {\n    return sortedPostsForward(state);\n  } else if (action.type === \"ORDER_BACKWARD\") {\n    return sortedPostsBackward(state);\n  } else if (action.type === \"SUM_VOTE\") {\n    return compareVotes(modifyVotes(state, action), action.type, action.post);\n  } else if (action.type === \"REST_VOTE\") {\n    return compareVotes(modifyVotes(state, action), action.type, action.post);\n  }\n\n  return state;\n};\n\nexport default createStore(combineReducers({\n  posts\n}), applyMiddleware(thunk));","map":{"version":3,"sources":["/home/user/Documentos/post-mas-votados/src/store.js"],"names":["createStore","applyMiddleware","combineReducers","thunk","sortedPostsBackward","arr","concat","sort","a","b","votes","sortedPostsForward","modifyVotes","state","action","map","post","JSON","stringify","type","compareVotes","forEach","element","index","console","log","splice","length","posts"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\n\nconst sortedPostsBackward = arr => {\n    return arr.concat().sort((a,b) => {\n        return b.votes - a.votes;\n    });\n}\n\nconst sortedPostsForward = arr => {\n    return arr.concat().sort((a,b) => {\n        return a.votes - b.votes;\n    });\n}\n\nconst modifyVotes = (state, action) => {\n    return state.map((post) => {\n        if(JSON.stringify(post) === JSON.stringify(action.post)){\n            if(action.type === \"SUM_VOTE\"){\n                post['votes'] ++;\n                return post;\n            } else{\n                post['votes'] --;\n                return post;\n            }\n        }\n        return post;\n    })\n}\n\nconst compareVotes = (arr, type, post) => {\n    if(type === \"SUM_VOTE\"){\n        arr.forEach(function(element, index) {\n            if(JSON.stringify(element) === JSON.stringify(post) && index > 0){\n                console.log(index)\n                if(arr[index - 1]['votes'] < post['votes']){\n                    arr.splice(index, 1);\n                    arr.splice(index - 1, 0, post);\n                }\n            }\n        });\n        return arr;\n    } else{\n        arr.forEach(function(element, index) {\n            if(JSON.stringify(element) === JSON.stringify(post) && index < arr.length -1){\n                if(arr[index + 1]['votes'] > post['votes']){\n                    arr.splice(index, 1);\n                    arr.splice(index + 1, 0, post);\n                }\n            }\n        });\n        return arr;\n    }\n}\n\nconst posts = (state=[], action) =>{\n    if(action.type === \"LOAD_POSTS\"){\n        return sortedPostsForward(action.posts);\n    } else if(action.type === \"ORDER_FORWARD\"){\n        return sortedPostsForward(state);\n    } else if(action.type === \"ORDER_BACKWARD\"){\n        return sortedPostsBackward(state);\n    } else if(action.type === \"SUM_VOTE\"){\n        return compareVotes(modifyVotes(state, action), action.type, action.post);\n    } else if(action.type === \"REST_VOTE\"){\n        return compareVotes(modifyVotes(state, action), action.type, action.post);\n    }\n\n    return state;\n}\n\nexport default createStore(combineReducers({ posts }), applyMiddleware(thunk));\n"]},"metadata":{},"sourceType":"module"}